/*
 * Created on 5 ago 2016 ( Time 15:52:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.mf.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.mf.bean.Comune;
import org.mf.bean.jpa.ComuneEntity;
import org.mf.business.service.mapping.ComuneServiceMapper;
import org.mf.data.repository.jpa.ComuneJpaRepository;
import org.mf.test.ComuneFactoryForTest;
import org.mf.test.ComuneEntityFactoryForTest;
import org.mf.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ComuneService
 */
@RunWith(MockitoJUnitRunner.class)
public class ComuneServiceImplTest {

	@InjectMocks
	private ComuneServiceImpl comuneService;
	@Mock
	private ComuneJpaRepository comuneJpaRepository;
	@Mock
	private ComuneServiceMapper comuneServiceMapper;
	
	private ComuneFactoryForTest comuneFactoryForTest = new ComuneFactoryForTest();

	private ComuneEntityFactoryForTest comuneEntityFactoryForTest = new ComuneEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer comuneId = mockValues.nextInteger();
		
		ComuneEntity comuneEntity = comuneJpaRepository.findOne(comuneId);
		
		Comune comune = comuneFactoryForTest.newComune();
		when(comuneServiceMapper.mapComuneEntityToComune(comuneEntity)).thenReturn(comune);

		// When
		Comune comuneFound = comuneService.findById(comuneId);

		// Then
		assertEquals(comune.getComuneId(),comuneFound.getComuneId());
	}

	@Test
	public void findAll() {
		// Given
		List<ComuneEntity> comuneEntitys = new ArrayList<ComuneEntity>();
		ComuneEntity comuneEntity1 = comuneEntityFactoryForTest.newComuneEntity();
		comuneEntitys.add(comuneEntity1);
		ComuneEntity comuneEntity2 = comuneEntityFactoryForTest.newComuneEntity();
		comuneEntitys.add(comuneEntity2);
		when(comuneJpaRepository.findAll()).thenReturn(comuneEntitys);
		
		Comune comune1 = comuneFactoryForTest.newComune();
		when(comuneServiceMapper.mapComuneEntityToComune(comuneEntity1)).thenReturn(comune1);
		Comune comune2 = comuneFactoryForTest.newComune();
		when(comuneServiceMapper.mapComuneEntityToComune(comuneEntity2)).thenReturn(comune2);

		// When
		List<Comune> comunesFounds = comuneService.findAll();

		// Then
		assertTrue(comune1 == comunesFounds.get(0));
		assertTrue(comune2 == comunesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Comune comune = comuneFactoryForTest.newComune();

		ComuneEntity comuneEntity = comuneEntityFactoryForTest.newComuneEntity();
		when(comuneJpaRepository.findOne(comune.getComuneId())).thenReturn(null);
		
		comuneEntity = new ComuneEntity();
		comuneServiceMapper.mapComuneToComuneEntity(comune, comuneEntity);
		ComuneEntity comuneEntitySaved = comuneJpaRepository.save(comuneEntity);
		
		Comune comuneSaved = comuneFactoryForTest.newComune();
		when(comuneServiceMapper.mapComuneEntityToComune(comuneEntitySaved)).thenReturn(comuneSaved);

		// When
		Comune comuneResult = comuneService.create(comune);

		// Then
		assertTrue(comuneResult == comuneSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Comune comune = comuneFactoryForTest.newComune();

		ComuneEntity comuneEntity = comuneEntityFactoryForTest.newComuneEntity();
		when(comuneJpaRepository.findOne(comune.getComuneId())).thenReturn(comuneEntity);

		// When
		Exception exception = null;
		try {
			comuneService.create(comune);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Comune comune = comuneFactoryForTest.newComune();

		ComuneEntity comuneEntity = comuneEntityFactoryForTest.newComuneEntity();
		when(comuneJpaRepository.findOne(comune.getComuneId())).thenReturn(comuneEntity);
		
		ComuneEntity comuneEntitySaved = comuneEntityFactoryForTest.newComuneEntity();
		when(comuneJpaRepository.save(comuneEntity)).thenReturn(comuneEntitySaved);
		
		Comune comuneSaved = comuneFactoryForTest.newComune();
		when(comuneServiceMapper.mapComuneEntityToComune(comuneEntitySaved)).thenReturn(comuneSaved);

		// When
		Comune comuneResult = comuneService.update(comune);

		// Then
		verify(comuneServiceMapper).mapComuneToComuneEntity(comune, comuneEntity);
		assertTrue(comuneResult == comuneSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer comuneId = mockValues.nextInteger();

		// When
		comuneService.delete(comuneId);

		// Then
		verify(comuneJpaRepository).delete(comuneId);
		
	}

}
