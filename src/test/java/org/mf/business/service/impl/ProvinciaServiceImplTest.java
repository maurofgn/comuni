/*
 * Created on 5 ago 2016 ( Time 15:52:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.mf.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.mf.bean.Provincia;
import org.mf.bean.jpa.ProvinciaEntity;
import org.mf.business.service.mapping.ProvinciaServiceMapper;
import org.mf.data.repository.jpa.ProvinciaJpaRepository;
import org.mf.test.ProvinciaFactoryForTest;
import org.mf.test.ProvinciaEntityFactoryForTest;
import org.mf.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ProvinciaService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProvinciaServiceImplTest {

	@InjectMocks
	private ProvinciaServiceImpl provinciaService;
	@Mock
	private ProvinciaJpaRepository provinciaJpaRepository;
	@Mock
	private ProvinciaServiceMapper provinciaServiceMapper;
	
	private ProvinciaFactoryForTest provinciaFactoryForTest = new ProvinciaFactoryForTest();

	private ProvinciaEntityFactoryForTest provinciaEntityFactoryForTest = new ProvinciaEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer provinciaId = mockValues.nextInteger();
		
		ProvinciaEntity provinciaEntity = provinciaJpaRepository.findOne(provinciaId);
		
		Provincia provincia = provinciaFactoryForTest.newProvincia();
		when(provinciaServiceMapper.mapProvinciaEntityToProvincia(provinciaEntity)).thenReturn(provincia);

		// When
		Provincia provinciaFound = provinciaService.findById(provinciaId);

		// Then
		assertEquals(provincia.getProvinciaId(),provinciaFound.getProvinciaId());
	}

	@Test
	public void findAll() {
		// Given
		List<ProvinciaEntity> provinciaEntitys = new ArrayList<ProvinciaEntity>();
		ProvinciaEntity provinciaEntity1 = provinciaEntityFactoryForTest.newProvinciaEntity();
		provinciaEntitys.add(provinciaEntity1);
		ProvinciaEntity provinciaEntity2 = provinciaEntityFactoryForTest.newProvinciaEntity();
		provinciaEntitys.add(provinciaEntity2);
		when(provinciaJpaRepository.findAll()).thenReturn(provinciaEntitys);
		
		Provincia provincia1 = provinciaFactoryForTest.newProvincia();
		when(provinciaServiceMapper.mapProvinciaEntityToProvincia(provinciaEntity1)).thenReturn(provincia1);
		Provincia provincia2 = provinciaFactoryForTest.newProvincia();
		when(provinciaServiceMapper.mapProvinciaEntityToProvincia(provinciaEntity2)).thenReturn(provincia2);

		// When
		List<Provincia> provinciasFounds = provinciaService.findAll();

		// Then
		assertTrue(provincia1 == provinciasFounds.get(0));
		assertTrue(provincia2 == provinciasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Provincia provincia = provinciaFactoryForTest.newProvincia();

		ProvinciaEntity provinciaEntity = provinciaEntityFactoryForTest.newProvinciaEntity();
		when(provinciaJpaRepository.findOne(provincia.getProvinciaId())).thenReturn(null);
		
		provinciaEntity = new ProvinciaEntity();
		provinciaServiceMapper.mapProvinciaToProvinciaEntity(provincia, provinciaEntity);
		ProvinciaEntity provinciaEntitySaved = provinciaJpaRepository.save(provinciaEntity);
		
		Provincia provinciaSaved = provinciaFactoryForTest.newProvincia();
		when(provinciaServiceMapper.mapProvinciaEntityToProvincia(provinciaEntitySaved)).thenReturn(provinciaSaved);

		// When
		Provincia provinciaResult = provinciaService.create(provincia);

		// Then
		assertTrue(provinciaResult == provinciaSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Provincia provincia = provinciaFactoryForTest.newProvincia();

		ProvinciaEntity provinciaEntity = provinciaEntityFactoryForTest.newProvinciaEntity();
		when(provinciaJpaRepository.findOne(provincia.getProvinciaId())).thenReturn(provinciaEntity);

		// When
		Exception exception = null;
		try {
			provinciaService.create(provincia);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Provincia provincia = provinciaFactoryForTest.newProvincia();

		ProvinciaEntity provinciaEntity = provinciaEntityFactoryForTest.newProvinciaEntity();
		when(provinciaJpaRepository.findOne(provincia.getProvinciaId())).thenReturn(provinciaEntity);
		
		ProvinciaEntity provinciaEntitySaved = provinciaEntityFactoryForTest.newProvinciaEntity();
		when(provinciaJpaRepository.save(provinciaEntity)).thenReturn(provinciaEntitySaved);
		
		Provincia provinciaSaved = provinciaFactoryForTest.newProvincia();
		when(provinciaServiceMapper.mapProvinciaEntityToProvincia(provinciaEntitySaved)).thenReturn(provinciaSaved);

		// When
		Provincia provinciaResult = provinciaService.update(provincia);

		// Then
		verify(provinciaServiceMapper).mapProvinciaToProvinciaEntity(provincia, provinciaEntity);
		assertTrue(provinciaResult == provinciaSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer provinciaId = mockValues.nextInteger();

		// When
		provinciaService.delete(provinciaId);

		// Then
		verify(provinciaJpaRepository).delete(provinciaId);
		
	}

}
