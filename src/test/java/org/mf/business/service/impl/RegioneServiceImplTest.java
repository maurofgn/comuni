/*
 * Created on 5 ago 2016 ( Time 15:52:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.mf.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.mf.bean.Regione;
import org.mf.bean.jpa.RegioneEntity;
import org.mf.business.service.mapping.RegioneServiceMapper;
import org.mf.data.repository.jpa.RegioneJpaRepository;
import org.mf.test.RegioneFactoryForTest;
import org.mf.test.RegioneEntityFactoryForTest;
import org.mf.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RegioneService
 */
@RunWith(MockitoJUnitRunner.class)
public class RegioneServiceImplTest {

	@InjectMocks
	private RegioneServiceImpl regioneService;
	@Mock
	private RegioneJpaRepository regioneJpaRepository;
	@Mock
	private RegioneServiceMapper regioneServiceMapper;
	
	private RegioneFactoryForTest regioneFactoryForTest = new RegioneFactoryForTest();

	private RegioneEntityFactoryForTest regioneEntityFactoryForTest = new RegioneEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer regioneId = mockValues.nextInteger();
		
		RegioneEntity regioneEntity = regioneJpaRepository.findOne(regioneId);
		
		Regione regione = regioneFactoryForTest.newRegione();
		when(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity)).thenReturn(regione);

		// When
		Regione regioneFound = regioneService.findById(regioneId);

		// Then
		assertEquals(regione.getRegioneId(),regioneFound.getRegioneId());
	}

	@Test
	public void findAll() {
		// Given
		List<RegioneEntity> regioneEntitys = new ArrayList<RegioneEntity>();
		RegioneEntity regioneEntity1 = regioneEntityFactoryForTest.newRegioneEntity();
		regioneEntitys.add(regioneEntity1);
		RegioneEntity regioneEntity2 = regioneEntityFactoryForTest.newRegioneEntity();
		regioneEntitys.add(regioneEntity2);
		when(regioneJpaRepository.findAll()).thenReturn(regioneEntitys);
		
		Regione regione1 = regioneFactoryForTest.newRegione();
		when(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity1)).thenReturn(regione1);
		Regione regione2 = regioneFactoryForTest.newRegione();
		when(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity2)).thenReturn(regione2);

		// When
		List<Regione> regionesFounds = regioneService.findAll();

		// Then
		assertTrue(regione1 == regionesFounds.get(0));
		assertTrue(regione2 == regionesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Regione regione = regioneFactoryForTest.newRegione();

		RegioneEntity regioneEntity = regioneEntityFactoryForTest.newRegioneEntity();
		when(regioneJpaRepository.findOne(regione.getRegioneId())).thenReturn(null);
		
		regioneEntity = new RegioneEntity();
		regioneServiceMapper.mapRegioneToRegioneEntity(regione, regioneEntity);
		RegioneEntity regioneEntitySaved = regioneJpaRepository.save(regioneEntity);
		
		Regione regioneSaved = regioneFactoryForTest.newRegione();
		when(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntitySaved)).thenReturn(regioneSaved);

		// When
		Regione regioneResult = regioneService.create(regione);

		// Then
		assertTrue(regioneResult == regioneSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Regione regione = regioneFactoryForTest.newRegione();

		RegioneEntity regioneEntity = regioneEntityFactoryForTest.newRegioneEntity();
		when(regioneJpaRepository.findOne(regione.getRegioneId())).thenReturn(regioneEntity);

		// When
		Exception exception = null;
		try {
			regioneService.create(regione);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Regione regione = regioneFactoryForTest.newRegione();

		RegioneEntity regioneEntity = regioneEntityFactoryForTest.newRegioneEntity();
		when(regioneJpaRepository.findOne(regione.getRegioneId())).thenReturn(regioneEntity);
		
		RegioneEntity regioneEntitySaved = regioneEntityFactoryForTest.newRegioneEntity();
		when(regioneJpaRepository.save(regioneEntity)).thenReturn(regioneEntitySaved);
		
		Regione regioneSaved = regioneFactoryForTest.newRegione();
		when(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntitySaved)).thenReturn(regioneSaved);

		// When
		Regione regioneResult = regioneService.update(regione);

		// Then
		verify(regioneServiceMapper).mapRegioneToRegioneEntity(regione, regioneEntity);
		assertTrue(regioneResult == regioneSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer regioneId = mockValues.nextInteger();

		// When
		regioneService.delete(regioneId);

		// Then
		verify(regioneJpaRepository).delete(regioneId);
		
	}

}
