/*
 * Created on 1 ago 2016 ( Time 13:27:29 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.mf.web.controller;


import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

//--- Entities
import org.mf.bean.Comune;
import org.mf.bean.Provincia;
import org.mf.bean.Regione;
//--- Services 
import org.mf.business.service.ComuneService;
import org.mf.business.service.ProvinciaService;
import org.mf.business.service.RegioneService;
import org.mf.util.AutoCompleteData;
//--- Common classes
import org.mf.web.common.AbstractController;
import org.mf.web.common.FormMode;
import org.mf.web.common.Message;
import org.mf.web.common.MessageType;
//--- List Items 
import org.mf.web.listitem.ProvinciaListItem;
import org.mf.web.listitem.RegioneListItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 * Spring MVC controller for 'Comune' management.
 */
@Controller
@RequestMapping("/comune")
public class ComuneController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "comune";
	private static final String MAIN_LIST_NAME   = "list";
	private static final String MAIN_PAGE_NAME   = "page";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_SEARCH = "comune/search";
	private static final String JSP_FORM   = "comune/form";
	private static final String JSP_LIST   = "comune/list";
	private static final String JSP_PAGE   = "comune/page";
	

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/comune/create";
	private static final String SAVE_ACTION_UPDATE   = "/comune/update";

	//--- Main entity service
	@Autowired
    private ComuneService comuneService; // Injected by Spring
	//--- Other service(s)
	@Autowired
    private ProvinciaService provinciaService; // Injected by Spring
	
	@Autowired
    private RegioneService regioneService; // Injected by Spring
	

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ComuneController() {
		super(ComuneController.class, MAIN_ENTITY_NAME );
		log("ComuneController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "Provincia"
	 * @param model
	 */
	private void populateListOfProvinciaItems(Model model) {
		List<Provincia> list = provinciaService.findAll();
		List<ProvinciaListItem> items = new LinkedList<ProvinciaListItem>();
		if (list.isEmpty()) {
			items.add(new ProvinciaListItem( null ) );
		} else {
			for ( Provincia provincia : list ) {
				items.add(new ProvinciaListItem( provincia ) );
			}
		}
		model.addAttribute("listOfProvinciaItems", items ) ;
	}
	
	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "Regione"
	 * @param model
	 */
	private void populateListOfRegioneItems(Model model) {
		List<Regione> list = regioneService.findAll();
		List<RegioneListItem> items = new LinkedList<RegioneListItem>();
		if (list.isEmpty()) {
			items.add(new RegioneListItem( null ) );
		} else {
			for ( Regione regione : list ) {
				items.add(new RegioneListItem( regione ) );
			}
		}
		model.addAttribute("listOfRegioneItems", items ) ;
	}


	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param comune
	 */
	private void populateModel(Model model, Comune comune, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, comune);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfProvinciaItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfProvinciaItems(model);
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Comune found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<Comune> list = comuneService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);
		return JSP_LIST;
	}
	
	/**
	 * Shows a page with a page of occurrences of Comune found in the database 
	 * @param pageable
	 * @param model
	 * @return
	 */
	@RequestMapping(produces="text/html")
	public String list(Pageable pageable, Model model) {
		log("Action 'list'");
		Page<Comune> page = comuneService.findAll(pageable);
	    model.addAttribute(MAIN_PAGE_NAME, page);
	    int nrOfPages = page.getTotalPages();
	    model.addAttribute("maxPages", nrOfPages);
	    return JSP_LIST;
	}
	
	/**
	 * Shows a page with the occurrences of Comune found in the database
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/page", produces="text/html")
	public String listPage(Model model) {
		log("Action 'list page'");
		populateListOfProvinciaItems(model);
		populateListOfRegioneItems(model);
	    return JSP_PAGE;
	}
	
//	@RequestMapping( value="/comune/page", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
//    @ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public DataTable<Comune> dataTablePage (
//			HttpServletRequest request,
//    		@RequestParam(value="draw",    		required=false, defaultValue = "1") Integer draw,
//    		@RequestParam(value="start",    	required=false, defaultValue = "0") Integer start,
//    		@RequestParam(value="length",    	required=false, defaultValue = "10") Integer length,
//    		@RequestParam(value="nome", 		required=false) String nome,
//    		@RequestParam(value="provinciaId",  required=false) Integer provinciaId,
//    		@RequestParam(value="regioneId",    required=false) Integer regioneId
//    		) {
//		
//		Sort sort = new Sort(
//				new Order(Direction.ASC, "nome"),
//				new Order(Direction.DESC, "abitanti")
//				);
//		
//		PageRequest pageRequest = new PageRequest(start/length, length, sort);
//		
//		Page<Comune> page = (nome == null || nome.isEmpty()) && regioneId == null && provinciaId == null 
//				? null	//no filter involves no data. At least one filter must be provided
//				: comuneService.findAll(pageRequest, (nome != null && !nome.isEmpty() ? "%"+nome+"%" : null ), regioneId, provinciaId);
//		
//		Long totRec = page != null ? page.getTotalElements() : comuneService.count();
//		
//		DataTable<Comune> dataTable = new DataTable<Comune>(totRec, (page != null ? page.getContent().size() : 0),  (page != null ? page.getContent() : Collections.emptyList()), draw);
//		return dataTable;
//	}
	
//	private Pageable getPageable(HttpServletRequest request) {
//		int pageNo = getPara(request, "page", 0);
//		int size = getPara(request, "size", 10);
//		
//		ColumnsDataTable columnsDataTable = new ColumnsDataTable(request);
//		Sort sort = (columnsDataTable.getOrder());
//		
//		return new PageRequest(pageNo, size, sort);
//	}
	
//	private Integer getPara(HttpServletRequest request, String paraKey, Integer defaultValue) {
//		String p = request.getParameter(paraKey);
//		Integer retValue = defaultValue;
//		try {
//			retValue = Integer.parseInt(p);
//		} catch (NumberFormatException e) {
//			retValue = defaultValue;
//		}
//		
//		return retValue;
//	}
	
	/**
	 * Shows a form page in order to create a new Comune
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		Comune comune = new Comune();	
		populateModel( model, comune, FormMode.CREATE);
		return JSP_FORM;
	}
	
	/**
	 * Shows a form page in order to update an existing Comune
	 * @param model Spring MVC model
	 * @param comuneId  primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{comuneId}")
	public String formForUpdate(Model model, @PathVariable("comuneId") Integer comuneId ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Comune comune = comuneService.findById(comuneId);
		populateModel( model, comune, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param comune  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid Comune comune, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				Comune comuneCreated = comuneService.create(comune); 
				model.addAttribute(MAIN_ENTITY_NAME, comuneCreated);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));

				return redirectToForm(httpServletRequest, comuneCreated.getComuneId() );
			} else {
				populateModel( model, comune, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "comune.error.create", e);
			populateModel( model, comune, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param comune  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid Comune comune, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				Comune comuneSaved = comuneService.update(comune);
				model.addAttribute(MAIN_ENTITY_NAME, comuneSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, comuneSaved.getComuneId());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, comune, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "comune.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, comune, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param comuneId  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{comuneId}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("comuneId") Integer comuneId) {
		log("Action 'delete'" );
		try {
			comuneService.delete( comuneId );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "comune.error.delete", e);
		}
		return redirectToList();
	}
	
	@RequestMapping("/search")
	public String formSearch(HttpServletRequest request, Model model) {
		log("Action 'formSearch'");
		//--- Populates the model with a new instance
//		Comune comune = new Comune();
//		model.addAttribute(MAIN_ENTITY_NAME, comune);
//		model.addAttribute("regioneId", 0);
		model.addAttribute("contextPath", request.getContextPath());
		populateListOfProvinciaItems(model);
		populateListOfRegioneItems(model);
		return JSP_SEARCH;
	}
	
	@RequestMapping( value="/autoCompleteName", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<AutoCompleteData> autoName(String term, Integer regione, Integer provincia) {
		return comuneService.autoCompleteName("%" + term + "%", regione, provincia);
	}
	
}
