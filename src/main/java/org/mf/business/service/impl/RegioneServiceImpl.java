/*
 * Created on 5 ago 2016 ( Time 15:52:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 * 
 */
package org.mf.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.mf.bean.Regione;
import org.mf.bean.jpa.RegioneEntity;
import org.mf.business.service.RegioneService;
import org.mf.business.service.mapping.RegioneServiceMapper;
import org.mf.data.repository.jpa.RegioneJpaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * Implementation of RegioneService
 *
 */
@Service("regioneService")
@Transactional
public class RegioneServiceImpl implements RegioneService {

	@Autowired
	private RegioneJpaRepository regioneJpaRepository;

	@Autowired
	private RegioneServiceMapper regioneServiceMapper;
	
	@Override
	public Regione findById(Integer regioneId) {
		RegioneEntity regioneEntity = regioneJpaRepository.findOne(regioneId);
		return regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity);
	}

	@Override
	public Page<Regione> findAll(Pageable pageRequest) {
		
		if (pageRequest == null)
			pageRequest = new PageRequest(
				  0, 20
//				  , new Sort(new Order(Direction.ASC, "description"), new Order(Direction.DESC, "value"))	//only for example
				);
		
		Page<RegioneEntity> pageEntity = regioneJpaRepository.findAll(pageRequest);
		
//		Page<Regione> page = pageEntity.map(this::convertToRegione);	//method reference. need at least java 8
		Page<Regione> page = pageEntity.map(new Converter<RegioneEntity, Regione>() {
					@Override
					public Regione convert(RegioneEntity regioneEntity) {
						return regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity);
					}
				});
		
		return page;
	}

	@Override
	public List<Regione> findAll() {
		Sort sort = new Sort(new Order(Direction.ASC, "nome"));
		Iterable<RegioneEntity> entities = regioneJpaRepository.findAll(sort);
		List<Regione> beans = new ArrayList<Regione>();
		for(RegioneEntity regioneEntity : entities) {
			beans.add(regioneServiceMapper.mapRegioneEntityToRegione(regioneEntity));
		}
		return beans;
	}

	@Override
	public Regione save(Regione regione) {
		return update(regione) ;
	}

	@Override
	public Regione create(Regione regione) {
		RegioneEntity regioneEntity = null;
		if (regione.getRegioneId() != null) {
			regioneEntity = regioneJpaRepository.findOne(regione.getRegioneId());
			if( regioneEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		regioneEntity = new RegioneEntity();
		regioneServiceMapper.mapRegioneToRegioneEntity(regione, regioneEntity);
		RegioneEntity regioneEntitySaved = regioneJpaRepository.save(regioneEntity);
		return regioneServiceMapper.mapRegioneEntityToRegione(regioneEntitySaved);
	}

	@Override
	public Regione update(Regione regione) {
		RegioneEntity regioneEntity = regioneJpaRepository.findOne(regione.getRegioneId());
		regioneServiceMapper.mapRegioneToRegioneEntity(regione, regioneEntity);
		RegioneEntity regioneEntitySaved = regioneJpaRepository.save(regioneEntity);
		return regioneServiceMapper.mapRegioneEntityToRegione(regioneEntitySaved);
	}

	@Override
	public void delete(Integer regioneId) {
		regioneJpaRepository.delete(regioneId);
	}

	public RegioneJpaRepository getRegioneJpaRepository() {
		return regioneJpaRepository;
	}

	public void setRegioneJpaRepository(RegioneJpaRepository regioneJpaRepository) {
		this.regioneJpaRepository = regioneJpaRepository;
	}

	public RegioneServiceMapper getRegioneServiceMapper() {
		return regioneServiceMapper;
	}

	public void setRegioneServiceMapper(RegioneServiceMapper regioneServiceMapper) {
		this.regioneServiceMapper = regioneServiceMapper;
	}

}
