/*
 * Created on 1 ago 2016 ( Time 13:27:29 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 * 
 */
package org.mf.business.service.impl;

import java.util.LinkedList;
import java.util.List;

import org.mf.bean.Comune;
import org.mf.bean.jpa.ComuneEntity;
import org.mf.business.service.ComuneService;
import org.mf.business.service.mapping.ComuneServiceMapper;
import org.mf.data.repository.jpa.ComuneJpaRepository;
import org.mf.util.AutoCompleteData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
//import org.springframework.data.domain.Sort;
//import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * Implementation of ComuneService
 *
 */
@Service("comuneService")
@Transactional
public class ComuneServiceImpl implements ComuneService {

	@Autowired
	private ComuneJpaRepository comuneJpaRepository;

	@Autowired
	private ComuneServiceMapper comuneServiceMapper;
	
	@Override
	public Comune findById(Integer comuneId) {
		ComuneEntity comuneEntity = comuneJpaRepository.findOne(comuneId);
		return comuneServiceMapper.mapComuneEntityToComune(comuneEntity);
	}

	@Override
	public Page<Comune> findAll(Pageable pageRequest) {
		
		if (pageRequest == null)
			pageRequest = new PageRequest(
				  0, 20
//				  , new Sort(new Order(Direction.ASC, "description"), new Order(Direction.DESC, "value"))	//only for example
				);
		
		Page<ComuneEntity> pageEntity = comuneJpaRepository.findAll(pageRequest);
		
//		Page<Comune> page = pageEntity.map(this::convertToComune);	//method reference. need at least java 8
		Page<Comune> page = pageEntity.map(new Converter<ComuneEntity, Comune>() {
					@Override
					public Comune convert(ComuneEntity comuneEntity) {
						return comuneServiceMapper.mapComuneEntityToComune(comuneEntity);
					}
				});
		
		return page;
	}

	@Override
	public List<Comune> findAll() {
		return convertList(comuneJpaRepository.findAll());
	}
	
	@Override
	public Comune save(Comune comune) {
		return update(comune) ;
	}

	@Override
	public Comune create(Comune comune) {
		ComuneEntity comuneEntity = null;
		if (comune.getComuneId() != null) {
			comuneEntity = comuneJpaRepository.findOne(comune.getComuneId());
			if( comuneEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		comuneEntity = new ComuneEntity();
		comuneServiceMapper.mapComuneToComuneEntity(comune, comuneEntity);
		ComuneEntity comuneEntitySaved = comuneJpaRepository.save(comuneEntity);
		return comuneServiceMapper.mapComuneEntityToComune(comuneEntitySaved);
	}

	@Override
	public Comune update(Comune comune) {
		ComuneEntity comuneEntity = comuneJpaRepository.findOne(comune.getComuneId());
		comuneServiceMapper.mapComuneToComuneEntity(comune, comuneEntity);
		ComuneEntity comuneEntitySaved = comuneJpaRepository.save(comuneEntity);
		return comuneServiceMapper.mapComuneEntityToComune(comuneEntitySaved);
	}
	
	@Override
	public void delete(Integer comuneId) {
		comuneJpaRepository.delete(comuneId);
	}
	
	@Override
	public Long count() {
		return comuneJpaRepository.count();
	}	
	
	@Override
	public List<AutoCompleteData> autoCompleteName(String term, Integer regione, Integer provincia) {

		Iterable<ComuneEntity> entities = comuneJpaRepository.retrieveByProvRegion(null, regione, provincia, term);

		List<AutoCompleteData> items = new LinkedList<AutoCompleteData>();
		for(ComuneEntity comuneEntity : entities) {
			items.add(new AutoCompleteData( comuneEntity.getNome(), comuneEntity.getComuneId()) );
		}
		return items;
	}
	
	@Override
	public Page<Comune> findAll(PageRequest pageRequest, String term, Integer regione, Integer provincia) {
		
		Page<ComuneEntity> pageEntity = comuneJpaRepository.retrieveByProvRegion(pageRequest, regione, provincia, term);
		
		Page<Comune> page = pageEntity.map(new Converter<ComuneEntity, Comune>() {
			@Override
			public Comune convert(ComuneEntity comuneEntity) {
				return comuneServiceMapper.mapComuneEntityToComune(comuneEntity);
			}
		});

		return page;
	}
	
	/**
	 * 
	 * @param entities
	 * @return
	 */
	private List<Comune> convertList(Iterable<ComuneEntity> entities) {
		List<Comune> beans = new LinkedList<Comune>();
		for(ComuneEntity comuneEntity : entities) {
			beans.add(comuneServiceMapper.mapComuneEntityToComune(comuneEntity));
		}
		return beans;
	}
	
	public ComuneJpaRepository getComuneJpaRepository() {
		return comuneJpaRepository;
	}

	public void setComuneJpaRepository(ComuneJpaRepository comuneJpaRepository) {
		this.comuneJpaRepository = comuneJpaRepository;
	}

	public ComuneServiceMapper getComuneServiceMapper() {
		return comuneServiceMapper;
	}

	public void setComuneServiceMapper(ComuneServiceMapper comuneServiceMapper) {
		this.comuneServiceMapper = comuneServiceMapper;
	}

}
