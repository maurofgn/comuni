#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#set( $entityKeyType = ${entity.keyAttributes[0].formattedType(0)} )
#end
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 * 
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.LinkedList;
import java.util.List;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
###foreach( $import in $java.imports($entity) )
###if($import != 'java.util.List' && $import != 'java.util.ArrayList')
##import $import;
###end
###end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.data.repository.jpa.${entity.name}JpaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * Implementation of ${entity.name}Service
 *
 */
@Service("${fn.uncapitalize($entity.name)}Service")
@Transactional
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	@Autowired
	private ${entity.name}JpaRepository ${fn.uncapitalize($entity.name)}JpaRepository;

	@Autowired
	private ${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper;
	
	@Override
	public ${entity.name} findById(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity);
	}

	@Override
	public Page<${entity.name}> findAll(Pageable pageRequest) {
		
		if (pageRequest == null)
			pageRequest = new PageRequest(
				  0, 20
//				  , new Sort(new Order(Direction.ASC, "description"), new Order(Direction.DESC, "value"))	//only for example
				);
		
		Page<${entity.name}Entity> pageEntity = ${fn.uncapitalize($entity.name)}JpaRepository.findAll(pageRequest);
		
//		Page<${entity.name}> page = pageEntity.map(this::convertTo${entity.name});	//method reference. need at least java 8
		Page<${entity.name}> page = pageEntity.map(new Converter<${entity.name}Entity, ${entity.name}>() {
					@Override
					public ${entity.name} convert(${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity) {
						return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity);
					}
				});
		
		return page;
	}

	@Override
	public List<${entity.name}> findAll() {
#if( $entity.hasCompositePrimaryKey() )
#set( $orderByFieldName = ${entity.name} + "EntityKey" )
#else
#set( $orderByFieldName = ${entity.keyAttributes[0].name} )
#end
		Sort sort = new Sort(new Order(Direction.ASC, "${orderByFieldName}"));		//TODO: set the appropriate fields for sorting
		return convert(${fn.uncapitalize($entity.name)}JpaRepository.findAll(sort));
	}

	@Override
	public ${entity.name} save(${entity.name} ${fn.uncapitalize($entity.name)}) {
		return update(${fn.uncapitalize($entity.name)}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${fn.uncapitalize($entity.name)}) {
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = null;
#foreach( $attr in $entity.keyAttributes)
#if($foreach.index == 0)		if (${fn.uncapitalize($entity.name)}.${attr.getter}() != null#else && ${fn.uncapitalize($entity.name)}.${attr.getter}() != null#end
#end) {
#if( $entity.hasCompositePrimaryKey() )
			${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
			${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
			${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
			if( ${fn.uncapitalize($entity.name)}Entity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		${fn.uncapitalize($entity.name)}Entity = new ${entity.name}Entity();
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public ${entity.name} update(${entity.name} ${fn.uncapitalize($entity.name)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public void delete(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${fn.uncapitalize($entity.name)}JpaRepository.delete(id);
#else
		${fn.uncapitalize($entity.name)}JpaRepository.delete(${fn.argumentsList($entity.keyAttributes)});
#end
	}

	@Override
	public Long count() {
		return ${fn.uncapitalize($entity.name)}JpaRepository.count();
	}

	public ${entity.name}JpaRepository get${entity.name}JpaRepository() {
		return ${fn.uncapitalize($entity.name)}JpaRepository;
	}

	public void set${entity.name}JpaRepository(${entity.name}JpaRepository ${fn.uncapitalize($entity.name)}JpaRepository) {
		this.${fn.uncapitalize($entity.name)}JpaRepository = ${fn.uncapitalize($entity.name)}JpaRepository;
	}

	public ${entity.name}ServiceMapper get${entity.name}ServiceMapper() {
		return ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

	public void set${entity.name}ServiceMapper(${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper) {
		this.${fn.uncapitalize($entity.name)}ServiceMapper = ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

	/**
	 * convert all elements of entities from ${entity.name}Entity To ${entity.name}
	 * @param entities
	 * @return List<${entity.name}>
	 */
	private List<${entity.name}> convert(Iterable<${entity.name}Entity> entities) {

		List<${entity.name}> retValue = new LinkedList<${entity.name}>();
		for(${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity : entities) {
			retValue.add(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity));
		}
		return retValue;
	}

}
